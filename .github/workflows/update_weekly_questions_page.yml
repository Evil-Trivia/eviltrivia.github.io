name: Update Weekly Content Page

on:
  # Scheduled weekly update every Thursday at 6 AM ET (10 AM UTC)
  schedule:
    - cron: '0 10 * * 4'

  # Allows manual triggering of the action for testing
  workflow_dispatch:

jobs:
  update-weekly-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Process "lastweekstrivia" page
      - name: Find the Existing "lastweekstrivia" Page
        id: find_existing_trivia
        run: |
          EXISTING_PAGE=$(ls lastweekstrivia*.html | head -n 1 || echo "")
          echo "::set-output name=existing_page::$EXISTING_PAGE"

      - name: Copy Content from Existing "lastweekstrivia" Page (if it exists)
        if: ${{ steps.find_existing_trivia.outputs.existing_page != '' }}
        id: copy_content_trivia
        run: |
          EXISTING_PAGE="${{ steps.find_existing_trivia.outputs.existing_page }}"
          PAGE_CONTENT=$(cat "$EXISTING_PAGE")
          RANDOM_SUFFIX=$(openssl rand -hex 4)
          NEW_PAGE_NAME="lastweekstrivia${RANDOM_SUFFIX}.html"
          echo "$PAGE_CONTENT" > "$NEW_PAGE_NAME"
          echo "::set-output name=new_page_name::$NEW_PAGE_NAME"

      - name: Delete old "lastweekstrivia" page
        if: ${{ steps.find_existing_trivia.outputs.existing_page != '' }}
        run: |
          rm -f "${{ steps.find_existing_trivia.outputs.existing_page }}"

      # Process "lastweeksanswers" page
      - name: Find the Existing "lastweeksanswers" Page
        id: find_existing_answers
        run: |
          EXISTING_PAGE=$(ls lastweeksanswers*.html | head -n 1 || echo "")
          echo "::set-output name=existing_page::$EXISTING_PAGE"

      - name: Copy Content from Existing "lastweeksanswers" Page (if it exists)
        if: ${{ steps.find_existing_answers.outputs.existing_page != '' }}
        id: copy_content_answers
        run: |
          EXISTING_PAGE="${{ steps.find_existing_answers.outputs.existing_page }}"
          PAGE_CONTENT=$(cat "$EXISTING_PAGE")
          RANDOM_SUFFIX=$(openssl rand -hex 4)
          NEW_PAGE_NAME="lastweeksanswers${RANDOM_SUFFIX}.html"
          echo "$PAGE_CONTENT" > "$NEW_PAGE_NAME"
          echo "::set-output name=new_page_name_answers::$NEW_PAGE_NAME"

      - name: Delete old "lastweeksanswers" page
        if: ${{ steps.find_existing_answers.outputs.existing_page != '' }}
        run: |
          rm -f "${{ steps.find_existing_answers.outputs.existing_page }}"

      # Update latest_pages.json with the new URLs
      - name: Update latest_pages.json
        run: |
          echo '{
            "lastweekstrivia": "https://eviltrivia.com/${{ steps.copy_content_trivia.outputs.new_page_name }}",
            "lastweeksanswers": "https://eviltrivia.com/${{ steps.copy_content_answers.outputs.new_page_name_answers }}"
          }' > latest_pages.json
          git add latest_pages.json
          echo "Checking for changes to commit..."
          git status
          git diff --staged
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and push
        if: ${{ always() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Commit only if there are changes
          git diff --cached --exit-code || git commit -m "Update latest pages JSON" || echo "No changes to commit"
          git push origin HEAD || echo "No changes to push"
          
      - name: List Files in Repository
        run: ls -l
